doctype html
html(lang="en")
    head
        title Report #{period.start} to #{period.end}
        link(href="style.css", rel="stylesheet")
        script(src="https://cdn.jsdelivr.net/npm/chart.js")
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js")
        script(src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js")
    body
        div
            h2 Merged events for period #{period.start} to #{period.end}
            div(class='container-sm text-left')
                h3 Aggregated Statistics
                div.row
                    div(class='col-lg-10 text-secondary')
                        div.row
                            div(class='col-sm-12 mb-3 mb-sm-0')
                                div(class='card mb-3')
                                    div(class='card-body text-center')
                                        h5.card-title #{stats.average.months} months, #{stats.average.days} days, #{stats.average.hours} hours, #{stats.average.minutes} minutes, #{stats.average.seconds} seconds
                                        p.card-text
                                            em Average time to merge
                        div.row
                            div(class='col-sm-3 mb-3 mb-sm-0')
                                div(class='card mb-3')
                                    div(class='card-body text-center')
                                        h5(class='card-title text-merged') #{stats.total.merged}
                                        p.card-text
                                         em # Merged
                            div(class='col-sm-3 mb-3 mb-sm-0')
                                div(class='card mb-3')
                                    div(class='card-body text-center')
                                        h5(class='card-title text-opened') #{stats.total.opened}
                                        p.card-text
                                            em # Opened
                            div(class='col-sm-3 mb-3 mb-sm-0')
                                div(class='card mb-3')
                                    div(class='card-body text-center')
                                        h5(class='card-title text-closed') #{stats.total.closed}
                                        p.card-text
                                            em # Closed
                            div(class='col-sm-3 mb-3 mb-sm-0')
                                div(class='card mb-3')
                                    div(class='card-body text-center')
                                        h5(class='card-title text-total') #{stats.total.all}
                                        p.card-text
                                            em # Overall
                    div.col-lg-2
                        div.row
                            div
                                canvas#aggregated-statistics
            div.container-sm
                ul(class="nav nav-tabs" id="myTab" role="tablist")
                    li(class="nav-item" role="presentation")
                        button(class="nav-link active" id="months-tab" data-bs-toggle="tab" data-bs-target="#months-tab-pane" type="button" role="tab" aria-controls="months-tab-pane" aria-selected="true")
                            h5 Months
                    li(class="nav-item" role="presentation")
                        button(class="nav-link" id="weeks-tab" data-bs-toggle="tab" data-bs-target="#weeks-tab-pane" type="button" role="tab" aria-controls="weeks-tab-pane" aria-selected="false")
                            h5 Weeks
                div(class="tab-content" id="periodTabContent")
                    div(class="tab-pane fade show active" id="months-tab-pane" role="tabpanel" aria-labelledby="months-tab" tabindex="0")
                        div#months
                            div(class='container-sm')
                                div.row
                                    div(class='col-lg-6')
                                        canvas#merged-events-months-histogram
                                    div(class='col-lg-6')
                                        canvas#merged-events-months-avg-med
                                div.row
                                    div(class='col-lg-6')
                                        canvas#cumulative-months-stats

                    div(class="tab-pane fade" id="weeks-tab-pane" role="tabpanel" aria-labelledby="weeks-tab" tabindex="0")
                        div#weeks
                            div(class='container-sm')
                                div.row
                                    div(class='col-lg-6')
                                        canvas#merged-events-weeks-histogram
                                    div(class='col-lg-6')
                                        canvas#merged-events-weeks-avg-med
                                div.row
                                    div(class='col-lg-6')
                                        canvas#cumulative-weeks-stats

        script(type='text/javascript').

            function initializeHistogramDataSet(mergeEventsFlows) {
                return [
                    {
                    label: '# of merged events',
                    data: mergeEventsFlows,
                    yAxisID: 'y',
                    barPercentage: 1.24,
                }
                ];
            }


            function initializeLinearDataSet(charts) {
                return charts.map((chart) => (
                    {
                        label: chart.label,
                        data: chart.data,
                        borderWidth: 3,
                        borderJoinStyle: "round",
                        tension: 0.2,
                        yAxisID: 'y',
                    }));
            }

            const options = {
                scales: {
                    y: {
                        display: true,
                        position: 'left',
                        ticks: {
                            beginAtZero: true,
                            callback: function (value, index, ticks) {
                                const duration = moment.duration(parseInt(value), "hours");
                                return #{stats.average.days} > 0 || #{stats.average.months} > 0 ? Math.round(duration.asDays()) + " day(s)" : Math.round(duration.asHours()) + " hours(s)";
                            }
                        }
                    },
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                let label = context.dataset.label || '';

                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    const duration = moment.duration(parseInt(context.parsed.y), "hours");
                                    label += #{stats.average.days} > 0 || #{stats.average.months} > 0 ? Math.round(duration.asDays()) + " day(s)" : Math.round(duration.asHours()) + " hours(s)";
                                }
                                return label
                            },
                        }
                    }
                }
            }

            const monthsMergedEventsHistogramContext = document.getElementById('merged-events-months-histogram');
            const monthsMergedEventsHistogramDatasets = initializeHistogramDataSet([#{stats.mr.months.data}]);
            const monthsMergedEventsAvgAndMedContext = document.getElementById('merged-events-months-avg-med');
            const monthsMergedEventsAvgAndMedDatasets = initializeLinearDataSet([{data: [#{stats.mr.months.average}], label: "Average time to merge"}, {data: [#{stats.mr.months.median}], label: "Median time to merge"}]);
            const monthsMergedEventsLabels = !{stringify(stats.mr.months.labels)}

            const weeksMergedEventsHistogramContext = document.getElementById('merged-events-weeks-histogram');
            const weeksMergedEventsHistogramDatasets = initializeHistogramDataSet([#{stats.mr.weeks.data}]);
            const weeksMergedEventsAvgAndMedContext = document.getElementById('merged-events-weeks-avg-med');
            const weeksMergedEventsAvgAndMedDatasets = initializeLinearDataSet([{data: [#{stats.mr.weeks.average}], label: "Average time to merge"}, {data: [#{stats.mr.weeks.median}], label: "Median time to merge"}]);
            const weeksMergedEventsLabels = !{stringify(stats.mr.weeks.labels)}

            const monthsCumulativeContext = document.getElementById('cumulative-months-stats')
            const monthsCumulativeDatasets = initializeLinearDataSet([
                {data: [#{stats.cumulative.months.openedData}], label: "Cumulative opened merged events"},
                {data: [#{stats.cumulative.months.closedData}], label: "Cumulative closed merged events"},
                {data: [#{stats.cumulative.months.trendData}], label: "Cumulative trend merged events"},
            ])
            const monthsCumulativeLabels = !{stringify(stats.cumulative.months.labels)}

            const weeksCumulativeContext = document.getElementById('cumulative-weeks-stats')
            const weeksCumulativeDatasets = initializeLinearDataSet([
                {data: [#{stats.cumulative.weeks.openedData}], label: "Cumulative opened merged events"},
                {data: [#{stats.cumulative.weeks.closedData}], label: "Cumulative closed merged events"},
                {data: [#{stats.cumulative.weeks.trendData}], label: "Cumulative trend merged events"},
            ])
            const weeksCumulativeLabels = !{stringify(stats.cumulative.weeks.labels)}

            const aggregatedMergeRequestContext = document.getElementById("aggregated-statistics")
            const aggregatedMergeRequestChartLabels = ['Merged', 'Opened', 'Closed', 'All']
            const aggregatedMergeRequestChartDatasets =    [{
                label: 'Aggregated merge requests',
                data: [
                    #{stats.total.merged},
                    #{stats.total.opened},
                    #{stats.total.closed},
                    #{stats.total.all}
                ],
                hoverOffset: 4
            }]

            function renderChart(type, context, labels, datasets, options = {}) {
                new Chart(context, {
                    type,
                    data: {
                        labels: labels,
                        datasets: datasets,
                    },
                    options
                });
            }

            renderChart('bar', monthsMergedEventsHistogramContext, monthsMergedEventsLabels, monthsMergedEventsHistogramDatasets, {});
            renderChart('line', monthsMergedEventsAvgAndMedContext, monthsMergedEventsLabels, monthsMergedEventsAvgAndMedDatasets, options);
            renderChart('bar', weeksMergedEventsHistogramContext, weeksMergedEventsLabels, weeksMergedEventsHistogramDatasets, {});
            renderChart('line', weeksMergedEventsAvgAndMedContext, weeksMergedEventsLabels, weeksMergedEventsAvgAndMedDatasets, options);
            renderChart('line', monthsCumulativeContext, monthsCumulativeLabels, monthsCumulativeDatasets, {});
            renderChart('line', weeksCumulativeContext, weeksCumulativeLabels, weeksCumulativeDatasets, {});
            renderChart('doughnut', aggregatedMergeRequestContext, aggregatedMergeRequestChartLabels, aggregatedMergeRequestChartDatasets, {});
